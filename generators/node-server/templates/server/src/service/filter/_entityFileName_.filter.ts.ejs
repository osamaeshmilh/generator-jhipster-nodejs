import { ApiProperty } from '@nestjs/swagger';
import { IsOptional, IsString, IsNumber, IsEnum, IsDate, IsBoolean } from 'class-validator';
import { Type } from 'class-transformer';

<%_
const uniqueEnums = {};
const fieldsWithoutId = [];

for (idx in fields) {
    if (fields[idx].fieldIsEnum && (
            !uniqueEnums[fields[idx].fieldType] || (uniqueEnums[fields[idx].fieldType] && fields[idx].fieldValues.length !== 0))) {
        uniqueEnums[fields[idx].fieldType] = this._.kebabCase(fields[idx].fieldType);
    }
    if (fields[idx].fieldName !== 'id') {
        fieldsWithoutId.push(fields[idx]);
    }
}
_%>

<%_ Object.keys(uniqueEnums).forEach(function(enumClass) { _%>
    import { <%= enumClass %> } from '../../domain/enumeration/<%= uniqueEnums[enumClass] %>';
<%_ }); _%>

export class StringFilter {
@ApiProperty({ required: false })
@IsOptional()
equals?: string;

@ApiProperty({ required: false })
@IsOptional()
contains?: string;

@ApiProperty({ required: false })
@IsOptional()
in?: string[];

@ApiProperty({ required: false })
@IsOptional()
notIn?: string[];
}

export class NumberFilter {
@ApiProperty({ required: false })
@IsOptional()
equals?: number;

@ApiProperty({ required: false })
@IsOptional()
greaterThan?: number;

@ApiProperty({ required: false })
@IsOptional()
lessThan?: number;

@ApiProperty({ required: false })
@IsOptional()
greaterThanOrEqual?: number;

@ApiProperty({ required: false })
@IsOptional()
lessThanOrEqual?: number;

@ApiProperty({ required: false })
@IsOptional()
in?: number[];

@ApiProperty({ required: false })
@IsOptional()
notIn?: number[];
}

export class DateFilter {
@ApiProperty({ required: false })
@IsOptional()
equals?: Date;

@ApiProperty({ required: false })
@IsOptional()
before?: Date;

@ApiProperty({ required: false })
@IsOptional()
after?: Date;

@ApiProperty({ required: false })
@IsOptional()
between?: [Date, Date];
}

export class BooleanFilter {
@ApiProperty({ required: false })
@IsOptional()
equals?: boolean;
}

export class <%= entityClass %>Filter {
// ID Filter
@ApiProperty({ required: false, description: 'Filter by exact ID match' })
@IsOptional()
@IsString()
id?: string;

@ApiProperty({ required: false, description: 'Filter IDs greater than value' })
@IsOptional()
@IsNumber()
idGt?: number;

@ApiProperty({ required: false, description: 'Filter IDs less than value' })
@IsOptional()
@IsNumber()
idLt?: number;

<%_ for (const field of fieldsWithoutId) {
    const fieldName = field.fieldName;
    const camelName = fieldName.charAt(0).toUpperCase() + fieldName.slice(1);

if (field.fieldType === 'number' || field.fieldType === 'integer' || field.fieldType === 'float') {
_%>
    @ApiProperty({ required: false, description: 'Filter by exact <%= fieldName %> match' })
    @IsOptional()
    @IsNumber()
    <%= fieldName %>?: number;

    @ApiProperty({ required: false, description: 'Filter <%= fieldName %> greater than value' })
    @IsOptional()
    @IsNumber()
    <%= fieldName %>Gt?: number;

    @ApiProperty({ required: false, description: 'Filter <%= fieldName %> less than value' })
    @IsOptional()
    @IsNumber()
    <%= fieldName %>Lt?: number;

    @ApiProperty({ required: false, description: 'Filter <%= fieldName %> greater than or equal to value' })
    @IsOptional()
    @IsNumber()
    <%= fieldName %>Gte?: number;

    @ApiProperty({ required: false, description: 'Filter <%= fieldName %> less than or equal to value' })
    @IsOptional()
    @IsNumber()
    <%= fieldName %>Lte?: number;

<%_ } else if (field.fieldType === 'date' || field.fieldType === 'timestamp') { _%>
    @ApiProperty({ required: false, description: 'Filter by exact <%= fieldName %> match' })
    @IsOptional()
    @Type(() => Date)
    @IsDate()
    <%= fieldName %>?: Date;

    @ApiProperty({ required: false, description: 'Filter <%= fieldName %> after date' })
    @IsOptional()
    @Type(() => Date)
    @IsDate()
    <%= fieldName %>After?: Date;

    @ApiProperty({ required: false, description: 'Filter <%= fieldName %> before date' })
    @IsOptional()
    @Type(() => Date)
    @IsDate()
    <%= fieldName %>Before?: Date;

<%_ } else if (field.fieldIsEnum) { _%>
    @ApiProperty({ required: false, enum: <%= field.fieldType %>, description: 'Filter by <%= fieldName %> equals value' })
    @IsOptional()
    @IsEnum(<%= field.fieldType %>)
    <%= fieldName %>?: <%= field.fieldType %>;

    @ApiProperty({ required: false, isArray: true, enum: <%= field.fieldType %>, description: 'Filter <%= fieldName %> in values' })
    @IsOptional()
    @IsEnum(<%= field.fieldType %>, { each: true })
    <%= fieldName %>In?: <%= field.fieldType %>[];

<%_ } else if (field.fieldType === 'boolean') { _%>
    @ApiProperty({ required: false, description: 'Filter by <%= fieldName %> value' })
    @IsOptional()
    @IsBoolean()
    <%= fieldName %>?: boolean;

<%_ } else { _%>
    @ApiProperty({ required: false, description: 'Filter by exact <%= fieldName %> match' })
    @IsOptional()
    @IsString()
    <%= fieldName %>?: string;

    @ApiProperty({ required: false, description: 'Filter <%= fieldName %> contains value' })
    @IsOptional()
    @IsString()
    <%= fieldName %>Contains?: string;

    @ApiProperty({ required: false, description: 'Filter <%= fieldName %> in values' })
    @IsOptional()
    @IsString({ each: true })
    <%= fieldName %>In?: string[];

<%_ }
} _%>

static apply(query: any): any {
const filter: any = {};

for (const [key, value] of Object.entries(query)) {
if (!value) continue;

const baseField = key.replace(/Gt|Lt|Gte|Lte|Contains|In|After|Before/g, '');

if (!filter[baseField]) {
filter[baseField] = {};
}

if (key.endsWith('Contains')) {
filter[baseField].$like = `%${value}%`;
} else if (key.endsWith('In')) {
filter[baseField].$in = value;
} else if (key.endsWith('Gt')) {
filter[baseField].$gt = value;
} else if (key.endsWith('Lt')) {
filter[baseField].$lt = value;
} else if (key.endsWith('Gte')) {
filter[baseField].$gte = value;
} else if (key.endsWith('Lte')) {
filter[baseField].$lte = value;
} else if (key.endsWith('After')) {
filter[baseField].$gt = value;
} else if (key.endsWith('Before')) {
filter[baseField].$lt = value;
} else {
filter[baseField] = value;
}
}

return filter;
}
}
