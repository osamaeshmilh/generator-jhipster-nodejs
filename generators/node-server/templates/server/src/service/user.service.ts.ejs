import { Injectable } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { FindManyOptions, FindOneOptions, Repository } from 'typeorm';
import { <%= user.persistClass %> } from '../domain/user.entity';
import { transformPassword } from '../security';
import { <%= user.dtoClass %> } from './dto/user.dto';
import { UserMapper } from './mapper/user.mapper';
import { ObjectId } from 'mongodb';

@Injectable()
export class UserService {
constructor(@InjectRepository(<%= user.persistClass %>) private userRepository: Repository<<%= user.persistClass %>>) {}

async findById(id: string): Promise<<%= user.dtoClass %> | undefined> {
const result = await this.userRepository.findOne({ where: { _id: new ObjectId(id) } as any });
return UserMapper.fromEntityToDTO(result);
}

async findByFields(options: FindOneOptions<<%= user.persistClass %>>): Promise<<%= user.dtoClass %> | undefined> {
const result = await this.userRepository.findOne(options);
return UserMapper.fromEntityToDTO(result);
}

async find(options: FindManyOptions<<%= user.persistClass %>>): Promise<<%= user.dtoClass %> | undefined> {
const result = await this.userRepository.findOne(options);
return UserMapper.fromEntityToDTO(result);
}

async findAndCount(options: FindManyOptions<<%= user.persistClass %>>): Promise<[<%= user.dtoClass %>[], number]> {
const [entities, count] = await this.userRepository.findAndCount(options);
const dtos = entities.map(entity => UserMapper.fromEntityToDTO(entity));
return [dtos, count];
}

async save(userDTO: <%= user.dtoClass %>, creator?: string, updatePassword = false): Promise<<%= user.dtoClass %> | undefined> {
const user = UserMapper.fromDTOtoEntity(userDTO);
if (updatePassword) {
await transformPassword(user);
}
if (creator) {
if (!user.createdBy) {
user.createdBy = creator;
}
user.lastModifiedBy = creator;
}
const result = await this.userRepository.save(user);
return UserMapper.fromEntityToDTO(result);
}

async update(userDTO: <%= user.dtoClass %>, updater?: string): Promise<<%= user.dtoClass %> | undefined> {
return this.save(userDTO, updater);
}

async delete(userDTO: <%= user.dtoClass %>): Promise<<%= user.dtoClass %> | undefined> {
const user = UserMapper.fromDTOtoEntity(userDTO);
const result = await this.userRepository.remove(user);
return UserMapper.fromEntityToDTO(result);
}
}
