/* eslint-disable max-classes-per-file */
import { BaseEntity } from './base.entity';
import { Type, Expose as JsonProperty } from 'class-transformer';
import { ParsedQs } from 'qs';

<%_ if (typeormOrderSupport) { _%>
export class Sort {
public property: string;
public direction: 'ASC' | 'DESC' | string;
constructor(sort?: string) {
if (sort) {
[this.property, this.direction] = sort.split(',');
} else {
this.property = 'id';
this.direction = 'ASC';
}
}

asOrder(): Record<string, string> {
const order: Record<string, string> = {};
order[this.property] = this.direction;
return order;
}
}
<%_ } _%>

// Updated to match Express query types exactly
export type ExpressQueryValue = string | ParsedQs | (string | ParsedQs)[];

export class PageRequest {
@JsonProperty()
page = 0;
@JsonProperty()
size = 20;
<%_ if (typeormOrderSupport) { _%>
@Type(() => Sort)
sort: Sort = new Sort('id,ASC');
<%_ } _%>

constructor(
page: ExpressQueryValue | undefined,
size: ExpressQueryValue | undefined
<%_ if (typeormOrderSupport) { _%>
,sort?: ExpressQueryValue
<%_ } _%>
) {
this.page = PageRequest.handleNumberTypes(page, this.page);
this.size = PageRequest.handleNumberTypes(size, this.size);
<%_ if (typeormOrderSupport) { _%>
this.sort = new Sort(PageRequest.handleQueryType(sort));
<%_ } _%>
}

public static handleNumberTypes(pp: ExpressQueryValue | undefined, fallback: number): number {
if (pp === undefined) {
return fallback;
}

const query = PageRequest.handleQueryType(pp);
if (query) {
const parsed = parseInt(query, 10);
return Number.isNaN(parsed) ? fallback : parsed;
}
return fallback;
}

public static handleQueryType(pa: ExpressQueryValue | undefined): string | undefined {
if (!pa) {
return undefined;
}

// Handle array case
if (Array.isArray(pa)) {
const firstValue = pa[0];
if (typeof firstValue === 'string') {
return firstValue;
}
return undefined;
}

// Handle string case
if (typeof pa === 'string') {
return pa;
}

// Handle ParsedQs object
if (typeof pa === 'object') {
const value = Object.values(pa)[0];
if (typeof value === 'string') {
return value;
}
}

return undefined;
}
}

export class Page<T extends BaseEntity> {
    constructor(
    public content: T[],
    public total: number,
    public pageable: PageRequest
    ) {}
    }
